package mocks

import mock "github.com/stretchr/testify/mock"
import models "RestApiProject/models"
import repositories "RestApiProject/repositories"

// StatesRepository is an autogenerated mock type for the StatesRepository type
type StatesRepository struct {
	mock.Mock
}

// GetAllStates provides a mock function with given fields:
func (_m *StatesRepository) GetAllStates() ([]models.State, error) {
	ret := _m.Called()

	var r0 []models.State
	if rf, ok := ret.Get(0).(func() []models.State); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.State)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSpecificState provides a mock function with given fields: _a0
func (_m *StatesRepository) GetSpecificState(_a0 string) (models.StateDetails, error) {
	ret := _m.Called(_a0)

	var r0 models.StateDetails
	if rf, ok := ret.Get(0).(func(string) models.StateDetails); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(models.StateDetails)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStateID provides a mock function with given fields: _a0
func (_m *StatesRepository) GetStateID(_a0 string) (int, error) {
	ret := _m.Called(_a0)

	var r0 int
	if rf, ok := ret.Get(0).(func(string) int); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

var _ repositories.StatesRepository = (*StatesRepository)(nil)
